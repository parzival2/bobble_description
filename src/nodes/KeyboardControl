#!/usr/bin/env python
from __future__ import print_function
import rospy
from geometry_msgs.msg import Twist
from bobble_controllers.msg import ControlCommands
import sys, select, termios, tty, time

msg = """
BobbleBot Keyboard Controller
---------------------------
Activate/Deactivate command:
    Activate/Shutdown: space bar
Moving around:
    Forward : w
    Backward : s
    Left : a
    Right : d
Speed Up/Down: 
    15% Increase: q
    15% Decrease: e
CTRL-C to quit
"""

moveBindings = {
    'a':(0,1),
    'w':(1,0),
    's':(-1,0),
    'd':(0,-1)
}

speedBindings={
    'q':(1.15,1.15),
    'e':(0.85,0.85)
}

def getKey():
    tty.setraw(sys.stdin.fileno())
    select.select([sys.stdin], [], [], 0)
    key = sys.stdin.read(1)
    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)
    mode_cmd_pub = rospy.Publisher('/bobble/bobble_balance_controller/bb_cmd', ControlCommands, queue_size = 1)
    cmd_vel_pub = rospy.Publisher('/bobble/bobble_balance_controller/cmd_vel', Twist, queue_size = 1)
    rospy.init_node('KeyboardController')
    drive_fwd = 0
    turn_rate = 0
    status = 0
    fwd_speed = 0.25
    turn_speed = 0.25
    active = False
    mode_cmd = ControlCommands()

    try:
        print(msg)
        while(1):
            key = getKey()
            if key == ' ':
                if active:
                    mode_cmd.IdleCmd = True
                    mode_cmd.StartupCmd = False
                    mode_cmd.DiagnosticCmd = False
                    print('Reset state. Hit space bar again to resume.')
                    mode_cmd_pub.publish(mode_cmd)
                    active = False
                else:
                    mode_cmd.IdleCmd = False
                    mode_cmd.StartupCmd = True
                    mode_cmd.DiagnosticCmd = False
                    print('BobbleBot Active! Hit space bar again to shutdown.')
                    mode_cmd_pub.publish(mode_cmd)
                    active = True
            if key in moveBindings.keys():
                drive_fwd = moveBindings[key][0]
                turn_rate = moveBindings[key][1]
            elif key in speedBindings.keys():
                fwd_speed = fwd_speed * speedBindings[key][0]
                turn_speed = turn_speed * speedBindings[key][1]
            else:
                print('No key press. Zero vels')
                drive_fwd = 0.0
                turn_rate = 0.0
                if (key == '\x03'):
                    break
            twist = Twist()
            twist.linear.x = drive_fwd*fwd_speed
            twist.angular.z = turn_rate*turn_speed
            print('Forward Velocity Cmd : ' + str(twist.linear.x))
            print('Turn Rate Cmd : ' + str(twist.angular.z))
            cmd_vel_pub.publish(twist)
            time.sleep(0.05)

    except Exception as e:
        print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0
        twist.angular.z = 0
        cmd_vel_pub.publish(twist)
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
